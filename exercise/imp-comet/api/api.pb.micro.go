// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: api.proto

package api

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Comet service

type CometService interface {
	// Ping Service
	Ping(ctx context.Context, in *Empty, opts ...client.CallOption) (*Empty, error)
	// Close Service
	Close(ctx context.Context, in *Empty, opts ...client.CallOption) (*Empty, error)
	//PushMsg push by key or mid
	PushMsg(ctx context.Context, in *PushMsgReq, opts ...client.CallOption) (*PushMsgReply, error)
	// Broadcast send to every enrity
	Broadcast(ctx context.Context, in *BroadcastReq, opts ...client.CallOption) (*BroadcastReply, error)
}

type cometService struct {
	c    client.Client
	name string
}

func NewCometService(name string, c client.Client) CometService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "api"
	}
	return &cometService{
		c:    c,
		name: name,
	}
}

func (c *cometService) Ping(ctx context.Context, in *Empty, opts ...client.CallOption) (*Empty, error) {
	req := c.c.NewRequest(c.name, "Comet.Ping", in)
	out := new(Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cometService) Close(ctx context.Context, in *Empty, opts ...client.CallOption) (*Empty, error) {
	req := c.c.NewRequest(c.name, "Comet.Close", in)
	out := new(Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cometService) PushMsg(ctx context.Context, in *PushMsgReq, opts ...client.CallOption) (*PushMsgReply, error) {
	req := c.c.NewRequest(c.name, "Comet.PushMsg", in)
	out := new(PushMsgReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cometService) Broadcast(ctx context.Context, in *BroadcastReq, opts ...client.CallOption) (*BroadcastReply, error) {
	req := c.c.NewRequest(c.name, "Comet.Broadcast", in)
	out := new(BroadcastReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Comet service

type CometHandler interface {
	// Ping Service
	Ping(context.Context, *Empty, *Empty) error
	// Close Service
	Close(context.Context, *Empty, *Empty) error
	//PushMsg push by key or mid
	PushMsg(context.Context, *PushMsgReq, *PushMsgReply) error
	// Broadcast send to every enrity
	Broadcast(context.Context, *BroadcastReq, *BroadcastReply) error
}

func RegisterCometHandler(s server.Server, hdlr CometHandler, opts ...server.HandlerOption) error {
	type comet interface {
		Ping(ctx context.Context, in *Empty, out *Empty) error
		Close(ctx context.Context, in *Empty, out *Empty) error
		PushMsg(ctx context.Context, in *PushMsgReq, out *PushMsgReply) error
		Broadcast(ctx context.Context, in *BroadcastReq, out *BroadcastReply) error
	}
	type Comet struct {
		comet
	}
	h := &cometHandler{hdlr}
	return s.Handle(s.NewHandler(&Comet{h}, opts...))
}

type cometHandler struct {
	CometHandler
}

func (h *cometHandler) Ping(ctx context.Context, in *Empty, out *Empty) error {
	return h.CometHandler.Ping(ctx, in, out)
}

func (h *cometHandler) Close(ctx context.Context, in *Empty, out *Empty) error {
	return h.CometHandler.Close(ctx, in, out)
}

func (h *cometHandler) PushMsg(ctx context.Context, in *PushMsgReq, out *PushMsgReply) error {
	return h.CometHandler.PushMsg(ctx, in, out)
}

func (h *cometHandler) Broadcast(ctx context.Context, in *BroadcastReq, out *BroadcastReply) error {
	return h.CometHandler.Broadcast(ctx, in, out)
}
